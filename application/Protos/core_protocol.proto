/**
  * Protocol between cores (peers).
  * Version : 4
  * All string are encoded in UTF-8.
  */

syntax = "proto3";

import "common.proto";

package Protos.Core;

/***** Multicast UDP messages. *****/
// I'm alive.
// This message is sent periodically to all other peers (for example each 5s).
// It contains some information about the peer and an array of chunk hashes the peer wants to download.
// If a peer owns one or more chunk corresponding to the given hashes then it
// will reply with a 'ChunksOwned' message.
// These hashes can come from different files.
// Remember that the peer ID of the sender is in the message header.
// a -> all
// id : 0x01
message IMAlive {
   uint32 version = 1; // The version of the protocol used. If 'version' from another peer doesn't correspond to our own version, this peer is ignored.
   string core_version = 9; // The core version, for example: "1.1.4 - Linux Mr. 3.2.0-24-generic".

   uint32 port = 2; // The port listened by the core (UDP + TCP).
   string nick = 3;

   uint64 amount = 4; // [byte] Amount of sharing.
   uint32 download_rate = 7; // [byte/s]
   uint32 upload_rate = 8; // [byte/s]

   uint64 tag = 5; // A random number, all responds ('ChunkOwned' message) must repeat this number.
   repeated Common.Hash chunk = 6; // The chunks the core wants to download. May be empty.

   repeated string chat_rooms = 10; // The joined chat rooms.
}

// This message is only sent if at least one requested chunks is known.
// Return an array with a bool value for each
// given chunks. 'true' means "I have this chunk".
// all -> a
// id : 0x02
message ChunksOwned {
   uint64 tag = 1; // The repeated number.
   repeated bool chunk_state = 2 [packed=true]; // The array size must have the same size of HaveChunks.chunks.
}


// Goodbye, my people need me.
// Sent by a peer leaving the network. Not mandatory.
// a -> all
// id : 0xFE
// No data


// Send a chat message to all other peers.
// The field 'peer_id' is not set because it is already set in the header.
// The field 'time' is not set because the receiver will set the time and not the sender.
// a -> all
// id : 0x11
// Common.ChatMessages


// Ask to a peer the 'n' last messages.
// We can ask periodically to a random peer to be sure we got all the messages of the network.
// For example the last 500 messages each second.
// a -> b
// id : 0x18
message GetLastChatMessages {
   uint32 number = 1;
   repeated uint64 message_id = 2 [packed=true];
   string chat_room = 3;
}

// This message is only sent if 'b' has some messages not contained in the given list.
// The fields 'peer_id' and 'time' must be set for all messages.
// b -> a
// id : 0x11
// Common.ChatMessages


// Searching a file or a directory.
// See http://dev.d-lan.net/projects/pmp/wiki/Algorithms#Searching-among-other-peers for more details.
// a -> all
// id : 0x21
message Find {
   uint64 tag = 1; // A tag to identify the search. All answers must have the same tag.
   Common.FindPattern pattern = 2;
}

// Results.
// The size of this message must fit in a UDP packet so it must not exeed a certain amount of bytes, depending of the network. See Protos.Core.Settings.max_udp_datagram_size.
// The size can typically set to 8164 B.
// Many of message can be sent by a peer for a given search. The core will only accept answers
// for a limited duration. For example 3 seconds.
// The file entries may or may not include the hashes depending of the core state and its policy.
// all -> a
// id : 0x22
// Common.FindResult (see common.proto)


/***** Unicast TCP Messages. *****/
// Browsing.
// a -> b
// id : 0x31
message GetEntries {
   Common.Entries dirs = 1; // The shared directories must have the field 'shared_dir' defined but 'shared_dir.shared_name' is not mandatory.
   bool get_roots = 2; // [default = false] If true the roots directories will be appended to the end of the entries result. If the field above ('dirs') is empty then the roots directories will always be sent whatever 'get_roots' is true or false.
   uint32 nb_max_hashes_per_entry = 3; // If given it limits the number of hashes per entry. It allows to use less memory if we don't care about hashes.
}

// The file entries may or may not include the hashes depending of the core state and its policy.
// b -> a
// id : 0x32
message GetEntriesResult {
   message EntryResult {
      enum Status {
         OK = 0;
         DONT_HAVE = 1;
         TIMEOUT_SCANNING_IN_PROGRESS = 2;
         ERROR_UNKNOWN = 255;
      }
      Status status = 1; // [default = OK].
      Common.Entries entries = 2;
   }
   repeated EntryResult result = 1;
}


// Get hashes.
// If a peer want to start a queued download but doesn't know its hashes
// it will ask the hashes to the source peer.
// If 'b' doesn't have the hashes but has the file
// the hashes will be computed on the fly. Thus this request
// can be a bit long (> 20s for example).
// The given entry shall have some chunks set to null. The number of chunks ('GetHashes.file.chunk') must be be correct.
// a -> b
// id : 0x41
message GetHashes {
   Common.Entry file = 1; // Must have the field 'shared_dir' set. If it already contains some chunk hashes only the next ones will be sent.
   repeated Common.Entry nextFiles = 2; // The next files for which we want to know their hashes in the future.
}

// b -> a
// id : 0x42
message GetHashesResult {
   enum Status {
      OK = 0;
      DONT_HAVE = 1; // 'b' doesn't have the requested entry.
      HASHES_DONT_MATCH = 2; // If one or more hashes of the given entry (GetHashes.file) don't match the hashes of the 'b' entry. Not implemented (no check is performed).
      ERROR_UNKNOWN = 255;
   }
   Status status = 1; // If status != OK nb_hash is not set.
   uint32 nb_hash = 2; // The number of hashes that will be sent. Only the unknown hashes are sent, not the total. Depend of 'GetHashes.file.chunk'.
}

// For each hash, this message is sent. Only if GetHashesResult.status == OK.
// b -> a
// id = 0x43
message HashResult {
   uint32 num = 1;
   Common.Hash hash = 2;
}

// Download.
// a -> b
// id : 0x51
message GetChunk {
   Common.Hash chunk = 1;
   uint32 offset = 2; // [byte] Relative to the beginning of the chunk.
}

// b -> a
// id : 0x52
message GetChunkResult {
   enum Status {
      OK = 0;
      DONT_HAVE = 1; // 'b' doesn't have this chunk.
      ALREADY_DOWNLOADING = 2; // If 'a' is already downloading a chunk from 'b'.
      TOO_MANY_CONNECTIONS = 3;
      DONT_HAVE_DATA_FROM_OFFSET = 4; // If we have the chunk but we don't have the data from the given offset.
      ERROR_UNKNOWN = 255;
   }
   Status status = 1;
   uint32 chunk_size = 2; // This value must be between 1 and Proto.Core.Settings.chunk_size.
}

// b -> a : stream of data (only if GetChunkResult.status == OK) . . .
