/**
  * Protocol between core and GUI.
  * When a command is sent to the core, one or more responds will be sent back,
  * there cannot be other message like 'event message' between theses messages.
  * Version : 1
  * All string are encoded in UTF-8.
  */

syntax = "proto3";

import "common.proto";

package Protos.GUI;

/***** Core state *****/
// Core -> GUI
// id: 0x1001
// The state is sent periodically to the GUI (each second for example)
// or right after a GUI command.
// The size of this message should be lesser than 63kB to fit in one IP packet.
message State {
   // A download can be a file or a directory.
   message Download {
      enum Status {
         QUEUED = 0x0;
         GETTING_THE_HASHES = 0x1;
         DOWNLOADING = 0x2;
         COMPLETE = 0x3;
         PAUSED = 0x4;
         DELETED = 0x5; // Should not be seen by the user.

         UNKNOWN_PEER_SOURCE = 0x10; // The source peer isn't found and we don't have all the hashes.
         ENTRY_NOT_FOUND = 0x11; // The entry isn't found in the source peer shared directories.
         NO_SOURCE = 0x12; // All the hashes are known but one ore more chunk are not present among the other peers.

         // All the following status will pause the download.
         NO_SHARED_DIRECTORY_TO_WRITE = 0x20;
         NO_ENOUGH_FREE_SPACE = 0x21;
         UNABLE_TO_CREATE_THE_FILE = 0x22;
         UNABLE_TO_CREATE_THE_DIRECTORY = 0x30;
         UNABLE_TO_RETRIEVE_THE_HASHES = 0x23;

         TRANSFER_ERROR = 0x24;
         UNABLE_TO_OPEN_THE_FILE = 0x25;
         FILE_IO_ERROR = 0x26;
         FILE_NON_EXISTENT = 0x27;
         GOT_TOO_MUCH_DATA = 0x28;
         HASH_MISSMATCH = 0x29;

         DIRECTORY_SCANNING_IN_PROGRESS = 0x31; // When a remote directory is being scanned it's not possible to browse it.
         UNABLE_TO_GET_ENTRIES = 0x32;
      }
      uint64 id = 1; // Cannot be 0.

      // When the entry is physically created, 'Common.Entry.exists' is set to true.
      // The hashes are never sent to save a bit of bandwidth.
      Common.Entry local_entry = 2;

      Status status = 3;
      uint64 downloaded_bytes = 4; // Always 0 when 'local_entry' is a directory.

      repeated Common.Hash peer_id = 5; // The first one always corresponds to the peer source.
      string peer_source_nick = 6;
   }
   message Upload {
      uint64 id = 1;
      Common.Entry file = 2; // As the download, the hashes aren't sent to save bandwidth.
      uint32 current_part = 3;
      uint32 nb_part = 4;
      uint32 progress = 5; // 0 to 10000.
      Common.Hash peer_id = 6;
   }
   message Stats {
      enum CacheStatus {
         LOADING_CACHE_IN_PROGRESS = 0; // Initial pass: synchronize the cache with the file system.
         SCANNING_IN_PROGRESS = 1; // 1st pass: grab all file/dir names and their size and index it.
         HASHING_IN_PROGRESS = 2; // 2nd pass: compute the hashes of all files.
         UP_TO_DATE = 3;
         UNKNOWN = 4;
      }
      CacheStatus cache_status = 1;
      uint32 progress = 2; // 0 to 10000.
      uint32 download_rate = 3; // [byte/s].
      uint32 upload_rate = 4; // [byte/s].
   }
   message Peer {
      enum PeerStatus {
         OK = 0;
         VERSION_OUTDATED = 1; // Version not compatible : too old.
         MORE_RECENT_VERSION = 2; // Version not compatible : more recent.
      }
      Common.Hash peer_id = 1;
      string nick = 2;
      uint64 sharing_amount = 3; // [byte].
      uint32 download_rate = 6; // [byte/s].
      uint32 upload_rate = 7; // [byte/s]
      Common.IP ip = 4;
      string core_version = 5;
      PeerStatus status = 8;
   }
   message SharedDir {
      Common.Hash id = 1;
      string path = 2; // Always ended with a '/'.
      uint64 size = 3;
      uint64 free_space = 4;
   }
   message Room {
      string name = 1;
      repeated Common.Hash peer_id = 2; // It never includes ourself.
      bool joined = 3;
   }

   repeated Peer peer = 2; // The first peer is always ourself and always exists.

   repeated SharedDir shared_directory = 3;

   bool integrity_check_enabled = 7;

   bool password_defined = 10; // [default = false].

   repeated Download download = 4;
   repeated Upload upload = 5;

   Stats stats = 6;

   Common.Interface.Address.Protocol listenAny = 8; // If this value is set then all the interfaces of the given protocol are listened. Otherwise see the following repeated 'interface' field.
   repeated Common.Interface interface = 9;

   repeated Room room = 11;
}

// GUI -> Core
// id: 0x1002
// Empty message to tell the core that we have finished to process the state message.


/***** Events *****/
// Core -> GUI
// id: 0x1011
// Common.ChatMessages


// Core -> GUI
// id: 0x1012
message EventLogMessages {
   message EventLogMessage {
      enum Severity {
         NONE =           0x00;
         SV_FATAL_ERROR = 0x01;
         SV_ERROR =       0x02;
         SV_WARNING =     0x04; // Send to the GUI but should not be shown to the user.
         SV_DEBUG =       0x08; // Never send to the GUI, there are only logged in the core log file.
         SV_END_USER =    0x10;
         SV_UNKNOWN =     0x20;
      }

      uint64 time = 1; // In [ms] since Epoch.
      Severity severity = 2;
      string message = 3;

      // Only in debug mode. (not used at all for the moment).
      // string component = 4;
   }
   repeated EventLogMessage message = 1;
}

/***** Commands. *****/
// Authentication.
// Always send by the core when a new connection is established.
// All other messages can't be sent or received without a proper authentication.
// A new salt is randomly generated each time a new connection is created.
// Core -> GUI
// id: 0x1021
message AskForAuthentication {
   uint64 salt = 1;
   uint64 salt_challenge = 2;
}

// Password is for local connections.
// GUI -> Core
// id: 0x1022
message Authentication {
   Common.Hash password_challenge = 1; // (hash(password) + salt) + salt_challenge
}

// Core -> GUI
// id: 0x1023
// If BAD_PASSWORD the core should wait a bit before sending the result (for example 1s) to avoid dictionary attack.
message AuthenticationResult {
   enum Status {
      AUTH_OK = 0x00;
      AUTH_BAD_PASSWORD = 0x01;
      AUTH_PASSWORD_NOT_DEFINED = 0x02; // The core doesn't have defined a password (empty password).
      AUTH_ERROR = 0xFF;
   }
   Status status = 1;
}


// GUI -> Core
// id: 0x10B1
// Set the language of the core.
message Language {
   Common.Language language = 1;
}


// GUI -> Core
// id: 0x10D1
// Change the core password.
// Both sent passwords are salted with 'AskForAuthentication.new_salt'.
// If 'new_password' is set to a null hash, the password is removed, in this case the old password isn't needed.
message ChangePassword {
   Common.Hash new_password = 1; // Salted with the new salt.
   uint64 new_salt = 2;

   Common.Hash old_password = 3; // Salted with the old salt. only if a password has already been set. 'See State.password_defined'.
}


// GUI -> Core
// id: 0x1031
// Set the settings.
message CoreSettings {
   message SharedDirectories {
      repeated string dir = 1; // A directory always ends with a slash ('/').
   }

   oneof nickOptional {
      string nick = 1;
   }

   SharedDirectories shared_directories = 2;
   Common.TriState enable_integrity_check = 3;

   string listen_address = 4; // [default = ""] If address is empty then listen to any adresses, in this case the protocol is given by 'listenAny'.
   Common.Interface.Address.Protocol listen_any = 5; // [default = IPv6]
}


// GUI -> Core
// id: 0x1041
message Search {
   Common.FindPattern pattern = 1;
   bool local = 2; // [default = false] Search among the local files and directories if true.
}

// Core -> GUI (directly)
// id: 0x1042
message Tag {
   uint64 tag = 1;
}

// Core -> GUI (deferred)
// This message is sent for each UDP datagram received.
// id: 0x1043
// Common.FindResult


// GUI -> Core
// id: 0x1051
message Browse {
   Common.Hash peer_id = 1;
   Common.Entries dirs = 2;
   bool get_roots = 3; // [default = false] If true the roots directories will be appended to the entries result. If the Dir field above is empty then the roots folders will always be sent whatever get_roots is true or false.
}

// Core -> GUI (directly)
// id: 0x1052
// Tag
// Core -> GUI (deferred)
// id: 0x1053
message BrowseResult {
   uint64 tag = 1;
   repeated Common.Entries entries = 2;
}


// GUI -> Core
// id: 0x1061
// Remove one or several download from the queue. If this download
// is not finished the unfinished file is removed.
message CancelDownloads {
   repeated uint64 id = 1;
   bool complete = 2; // [default = false] If true all completed downloads are removed from the download queue.
}


// GUI -> Core
// id: 0x10C1
// Pause or unpause the given downloads.
message PauseDownloads {
   repeated uint64 id = 1;
   bool pause = 2; // [default = true] Id false -> unpause.
}


// GUI -> Core
// id: 0x1071
// Tell the core to move one or more downloads in the list right before or after a given set of downloads.
// 'id_ref' and 'id_to_move' must have at least one item each.
// The order of the moved downloads are kept unchanged.
//
// Example #1: id_ref = [21], id_to_move = [16, 18], position = BEFORE
// Initial list: [34, 21, 18, 54, 16]
// After the operation: [34, 18, 16, 21, 54]
//
// Example #2: id_ref = [8, 2, 5], id_to_move = [3, 6], position = AFTER
// Initial list : [3, 8, 5, 6, 2]
// After the operation: [8, 5, 2, 3, 6]
message MoveDownloads {
   enum Position {
      BEFORE = 0;
      AFTER = 1;
   }
   repeated uint64 id_ref = 1;
   repeated uint64 id_to_move = 2;
   Position position = 3; // [default = BEFORE].
}


// GUI -> Core
// id: 0x1081
// Says to the core to download a file or a directory.
// The given path can be relative to a shared directory (if destination_directory_id is set)  or absolute (if destination_directory_id is null).
message Download {
   Common.Hash peer_id = 1; // From where the file/dir is.
   Common.Entry entry = 2;

   Common.Hash destination_directory_id = 3; // Where to put the folder/file. It must one of the directory of State.destination_directory. If this directory is not set, the first directory with enough free space will be taken.
   string destination_path = 4; // [default="/"] Must ended with an '/'. If 'Common.Hash destination_directory_id' isn't set then a new shred directory will be created (if needed).
}


// GUI -> Core
// id: 0x1091
// Send a chat message to the given room. The message goes to the main chat if 'room' isn't set.
message ChatMessage {
   string message = 1;
   string room = 2;
   repeated Common.Hash peer_ids_answer = 3; // The peers involved in the message.
}

// Core -> GUI (directly)
// id: 0x1092
message ChatMessageResult {
   enum Status {
      OK = 0;
      MESSAGE_TOO_LARGE = 1;
      ERROR_UNKNOWN = 255;
   }
   Status status = 1; // [default = OK].
}


// GUI -> Core
// id: 0x1094
message JoinRoom {
   string name = 1;
}


// GUI -> Core
// id: 0x1098
message LeaveRoom {
   string name = 1;
}


// GUI -> Core
// id: 0x10A1
// Ask to receive a new state.
// This message doesn't have a body.


// GUI -> Core
// id: 0x10E1
// Ask to refresh the known network interfaces.
// A new state is immediately sent by the core.
// This message doesn't have a body.
